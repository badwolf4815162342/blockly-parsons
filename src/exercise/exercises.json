{
    "exercises": [
        {
            "number": 0,
            "name": "Even or odd.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/even_odd.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/even_odd.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: 5, <b>Required output:</b> Number is odd.</p><p><b>Input</b>: 4, <b>Required output:</b> Number is even.</p>",
            "text": "Report whether an <b><b>Input</b></b> number is <b>even</b> or <b>odd</b>."
        },
        {
            "number": 1,
            "name": "Logical AND.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/logical_and.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/logical_and.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: [True,True,True], <b>Required output:</b> True</p><p><b>Input</b>: [False,True,False,True,True], <b>Required output:</b> False</p>",
            "text": "Write a program that logically evaluates the <b>AND</b> for a list of booleans. <b>If and only if ALL values are True</b>, the program prints <b>True</b>, <b>otherwise False</b>."        
        },
        {
            "number": 2,
            "name": "Logical OR.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/logical_or.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/logical_or.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: [True,True,False], <b>Required output:</b> True</p><p><b>Input</b>: [False,False,False,False,False], <b>Required output:</b> False</p>",
            "text": "Write a program that logically evaluates the <b>OR</b> for a list of booleans. <b>If at least one value is True</b>, the program prints <b>True</b>, <b>otherwise False</b>."        
        },
        {
            "number": 3,
            "name": "Replace falses.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/replace_falses.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/replace_falses.txt",
            "trys": 0,
            "startZoomLevel": 0.7,
            "testingOutput":"<p><b>Input</b>: [True,True,False], <b>Required output:</b> [True, True, True]</p><p><b>Input</b>: [False,False,False,False,False], <b>Required output:</b> [True, True, True, True, True]</p>",
            "text": "<p>Write a program that <b>reads in a list of booleans</b> and <b>replaces</b> all occurrences of the value <b>False by True</b></p><p>For example when reading the list [True,True,False] you should in the end print the list [True,True,True].</p>"
        },
        {
            "number": 4,
            "name": "Count target values.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/count_target_values.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/count_target_values.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: [5,3,7,-1,3,7,-5,0], <b>Required output:</b> The target was found this often: 2</p><p><b>Input</b>: [0,-1,-5], <b>Required output:</b> The target was found this often: 0</p>",
            "text": "<p>One of the common things to do with a list is to <b>count the number</b> of times a <b>target value</b> appears in a list. Write a program that counts the occurrences of the <b>target value 3</b> in a <b>list you read in</b>.</p><p>For example the program should print out - The target was found this often: 0 - for the list [1, 2, 5] or - The target was found this often: 2 - for the list [3, 4, 3].</p>"
        },
        {
            "number": 5,
            "name": "Filtered sum.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/filtered_sum.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/filtered_sum.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: [5,3,7,-1,7,-5,0], <b>Required output:</b> The sum is 22</p><p><b>Input</b>: [0,-1,-5], <b>Required output:</b> The sum is 0</p>",
            "text": "Construct a program that <b>reads in a list</b> of numbers and prints the <b>sum</b> of all values in the list that are <b>single digit positive numbers</b>. Loop through all values in the list and add each one that matches the condition to the sum. <b>Print</b> the sum."
        },
        {
            "number": 6,
            "name": "Word start checker.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/word_start_checker.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/word_start_checker.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: 'Speed','Supper','Susanne', <b>Required output:</b> All words start with an 'S'.</p><p><b>Input</b>: 'Special','Sand','Sun','Moon', <b>Required output:</b> Some words start with other letters than 'S'.</p>",
            "text": "Construct a program that <b>reads in a list</b> of words and prints out if <b>all</b> words <b>start with the letter S</b> or not. You do not have to worry about upper or lower case â€“ only look for uppercase S."
        },
        {
            "number": 7,
            "name": "Guessing game.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/guessing_game.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/guessing_game.txt",
            "trys": 0,
            "startZoomLevel": 0.6,
            "testingOutput":"<p><b>Input</b>: '4','9','2','-1', <b>Required output:</b> 'Too low ...', 'Too high ...', 'Too low ...'</p><p><b>Input</b>: '10','3','7', <b>Required output:</b> 'Too high ...', 'Too low ...', 'Right! Number of Tries: 3'</p>",
            "text": "First we set a <b>guess number</b> (in this case it is set to 7). Now write a program that <b>reads in numbers</b> and <b>ends immediatly</b> when a <b>negative number is read or the guess was correct</b>. Then check if each value matches the guess number. The program should also give <b>feedback</b> if the <b>Input</b> is <b>too low</b> or <b>too high</b> and in the end <b>how many tries</b> it took."
        },
        {
            "number": 8,
            "name": "New: Union of lists.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/union_list.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/union_list.txt",
            "trys": 0,
            "startZoomLevel": 0.7,
            "testingOutput":"<p><b>Input</b>: [5,3,7,-1],[3,7,-5,0], <b>Required output:</b> [0, -5, -1, 7, 3, 5]</p><p><b>Input</b>: [0,-1,-5],[2,3,0], <b>Required output:</b> [3, 2, -5, -1, 0]</p>",
            "text": "<p>Write a program that <b>reads in in two lists</b> and prints the <b>union of both lists</b>.</p><p>For example when given the two lists [5,3,7,-1] and [3,7,-5,0] the program prints '[5,3,7,-1,-5,0]'.</p><p>Note: The function 'in list [union_list] find first occurance of item [item]' returns 0 if the item is not found.</p>"
        },
        {
            "number": 9,
            "name": "Find even or odd and maximum in list.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/find_max_and_even_odd.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/find_max_and_even_odd.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "testingOutput":"<p><b>Input</b>: '4','9','2','-1', <b>Required output:</b> 'Number is even.','This is the current max.','Number is odd.','This is the current max.','Number is even.'</p>",
            "text": "Write a program that <b>reads in numbers</b> and <b>ends immediatly</b> when a <b>negtive number is read</b>. For all the numbers in the list it should output <b>first</b> if the number is <b>even or odd</b> and <b>afterwards</b> whether it is the <b>current maximum</b>."
        }
    ]
}