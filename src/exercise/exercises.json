{
    "exercises": [
        {
            "number": 0,
            "name": "Even or odd.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/even_odd.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/even_odd.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "text": "Report whether an <b>input</b> number is <b>even</b> or <b>odd</b>."
        },
        {
            "number": 1,
            "name": "NEW: Filtered sum.\nDifficulty: easy",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/filtered_sum.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/filtered_sum.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "text": "Construct a program that <b>reads in a list</b> of numbers and returns the <b>sum</b> of all values in the list that are <b>single digit positive numbers</b>. Loop through all values in the list and add each one that matches the condition to the sum. <b>Print</b> the sum."
        },
        {
            "number": 2,
            "name": "Guessing game.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/guessing_game.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/guessing_game.txt",
            "trys": 0,
            "startZoomLevel": 0.6,
            "text": "First we set a <b>guess number</b> (in this case it is set to 7). Now write a program that <b>reads in numbers</b> and <b>ends immediatly</b> when a <b>negative number is read</b>. Then check if each value matches the guess number. The program should also give <b>feedback</b> if the input is <b>too low</b> or <b>too high</b> and in the end <b>how many tries</b> it took."
        },
        {
            "number": 3,
            "name": "Reverse word and wordlist.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/reverse_word_and_wordlist.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/reverse_word_and_wordlist.txt",
            "trys": 0,
            "startZoomLevel": 0.9,
            "text": "Given a <b>list of words</b> which make up a sentence, generate and <b>print</b> out a string which consists of <b>all the words in reverse order</b>, with <b>each word itself reversed too</b>.  Place a <b>space</b> after every word. For example, if the list of words contains “Hello” and “World” in that order, the string created would be “dlroW olleH “."
        },
        {
            "number": 4,
            "name": "Find even or odd and maximum in list.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/find_max_and_even_odd.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/find_max_and_even_odd.txt",
            "trys": 0,
            "startZoomLevel": 0.8,
            "text": "Write a program that <b>reads in numbers</b> and <b>ends immediatly</b> when a <b>negtive number is read</b>. For all the numbers in the list it should output <b>first</b> if the number is <b>even or odd</b> and <b>afterwards</b> whether it is the <b>current maximum</b>."
        },
        {
            "number": 5,
            "name": "NEW: Average value in range.\nDifficulty: medium",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/avg_value_in_range.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/avg_value_in_range.txt",
            "trys": 0,
            "startZoomLevel": 0.7,
            "text": "<p>Construct a program that <b>reads a list of numbers</b>. This list consists of a variable number of values <b>followed by an additional number for the start and an additional one for the end of your range</b>. The program should print the <b>average</b> of the values between the start and end indices (inclusive). Check if the difference between the end index and the start index is 1 or higher. If so, <b>print the average of the values from start to end</b> and <b>otherwise print 0</b> (to prevent a divide by 0).</p><p>For example the list [5,3,7,1,7,15,30,2,5] with start 2 and end 5 should return 4.5.</p>"
        },
        {
            "number": 6,
            "name": "Rainfall problem.\nDifficulty: advanced",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/rainfall.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/rainfall.txt",
            "trys": 0,
            "startZoomLevel": 0.5,
            "text": "Let’s imagine that you have a list that contains amounts of rainfall for each day, collected by a meteorologist. Her rain gathering equipment occasionally makes a mistake and reports a negative amount for that day. We have to ignore those. We need to write a program to (a) calculate the total rainfall by adding up all the positive integers (and only the positive integers), (b) count the number of positive integers (we will count with “1.0” so that our average can have a decimal point), and (c) print out the average rainfall at the end. Only print the average if there was some rainfall, otherwise print “No rain”."
        },
        {
            "number": 7,
            "name": "NEW: Find longest.\nDifficulty: advanced",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/find_longest.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/find_longest.txt",
            "trys": 0,
            "startZoomLevel": 0.6,
            "text": "<p>Write the find-longest program, which aims to find the <b>longest consecutive block</b> of the value <b>target</b> (in this case <b>10</b>) occurring in the <b>read</b> in list <b>numbers</b>.</p><p>For example, if the list numbers contains the values [7, 10, 10, 15, 15, 15, 15, 10, 10, 10, 15, 10] the program should print 3, the length of the longest consecutive block of 10s.</p>"
        },
        {
            "number": 8,
            "name": "NEW: Is level trail segment.\nDifficulty: advanced",
            "baseXmlFile": "/blockly-parsons-prod/exercises/xml/is_level_trail_segment.xml",
            "unittestFile": "/blockly-parsons-prod/exercises/unittest/is_level_trail_segment.txt",
            "trys": 0,
            "startZoomLevel": 0.6,
            "text": "<p>Write a program which prints True when the trail segment is level and False otherwise. A trail segment is defined by a starting marker, an ending marker, and all markers between those two markers (including the start and end markers). The program should read a list of numbers and return true if the difference between the maximum elevation and the minimum elevation in the trail segment is less than or equal to 10 meters.</p> <p>To determine if the trail is level first set the min and max values to the value at the start index. Loop from the start index to the end index (inclusive). If the value at the current index is less than the min, set the min to the current value. If the value at the current index is greater than the max, set the max to the current value. Return true if the difference between the max and min is less than or equal to ten, otherwise return false.</p>"
        }
    ]
}